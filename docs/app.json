[{"name": "app.py", "content": "from pathlib import Path\nimport pandas as pd\nimport yfinance as yf\nfrom faicons import icon_svg\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom shiny.ui import output_ui\nfrom shinywidgets import render_plotly\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\n# Default to the last month\nend = pd.Timestamp.now()\nstart = end - pd.Timedelta(weeks=4)\n\nui.page_opts(title=\"Apple AAPL Stock Explorer\", fillable=True)\nselected_stock = \"AAPL\" #default selected stock\n\nwith ui.sidebar():\n    # Search input\n    ui.input_date_range(\"dates\", \"Select dates\", start=start, end=end)\n    ui.input_numeric(\"quantity\", \"Quantity\", min=1, max=100, step=1, value=1)\n\n    # Links and newsfeed section\n    ui.h6(\"Newsfeed and links:\")\n    ui.a(\n        \"APPL Google Financial today\",\n        href=\"https://www.google.com/search?sca_esv=f16471168e6fc9b9&sca_upv=1&rlz=1C5CHFA_enUS748US748&sxsrf=ACQVn0_zAqWeiIBc3fzp9NY3AiSMHIloog:1712106682380&q=google+finance+AAPL&sa=X&ved=2ahUKEwiaiPu07qSFAxULElkFHQ3ODS0Q7xYoAHoECAkQAg&biw=1598&bih=788&dpr=1\",\n        style=\"color: #007bff;\",  # Blue color for links\n        target=\"_blank\",\n      \n    )\n\n    ui.a(\n        \"APPL Bloomberg\",\n        href=\"https://www.bloomberg.com/news/articles/2024-04-02/apple-flirts-with-support-levels-after-worst-quarter-in-a-decade?embedded-checkout=true\",\n        target=\"_blank\",\n        style=\"color: #007bff;\",  # Blue color for links\n    )\n    ui.a(\n        \"APPL Yahoo Finance Today\",\n        href=\"https://finance.yahoo.com/quote/AAPL/\",\n        target=\"_blank\",\n        style=\"color: #007bff;\",  # Blue color for links\n    )\n\n    ui.a(\n        \"GitHub Source\",\n        href=\"https://github.com/drodmay1/cintel-06-custom\",\n        target=\"_blank\",\n        style=\"color: #007bff;\",  # Blue color for links\n    )\n    \n    ui.a(\n        \"GitHub App\",\n        href=\"https://github.com/drodmay1/cintel-06-custom/blob/main/dashboard/app.py\",\n        target=\"_blank\",\n        style=\"color: #007bff;\",  # Blue color for links\n    )\n    ui.a(\n        \"PyShiny\", \n        href=\"https://shiny.posit.co/py/\", \n        target=\"_blank\",\n        style=\"color: #007bff;\",  # Blue color for links\n    )\n   \nwith ui.layout_column_wrap(fill=False):\n    with ui.value_box(showcase=icon_svg(\"dollar-sign\")):\n        \"Current Price\"\n\n        @render.ui\n        def price():\n            close = get_data()[\"Close\"]\n            return f\"{close.iloc[-1]:.2f}\"\n\n    with ui.value_box(showcase=output_ui(\"change_icon\")):\n        \"Change\"\n\n        @render.ui\n        def change():\n            return f\"${get_change():.2f}\"\n\n    with ui.value_box(showcase=icon_svg(\"percent\")):\n        \"Percent Change\"\n\n        @render.ui\n        def change_percent():\n            return f\"{get_change_percent():.2f}%\"\n        \n    with ui.value_box(showcase=icon_svg(\"coins\")):\n        \"Total Value\"\n\n        @render.ui\n        def total_value():\n            data = get_data()\n            quantity = input.quantity()\n            if data.empty or quantity is None:\n                return \"N/A\"\n            else:\n                close_price = data[\"Close\"].iloc[-1]\n                return f\"${close_price * quantity:.2f}\"\n            \n        ui.include_css(Path(__file__).parent / \"styles.css\")\n\n\nwith ui.layout_columns(col_widths=[9, 3]):\n    with ui.card(full_screen=True):\n        ui.card_header(\"Price history and volume\")\n\n        @render_plotly\n        def price_and_volume():\n            data = get_data()\n\n            #C reate a new plotly figure\n            fig = go.Figure()\n\n            # Add candlestick trace\n            fig.add_trace(\n                go.Candlestick(x=data.index,\n                               open=data['Open'],\n                               high=data['High'],\n                               low=data['Low'],\n                               close=data['Close'],\n                               increasing_line_color='rgba(0,128,0,0.7)',\n                               decreasing_line_color='rgba(255,0,0,0.7)',\n                               name=\"Candlestick\")\n            )\n\n            # Add volume trace as a bar chart\n            fig.add_trace(\n                go.Bar(x=data.index, y=data['Volume'], name=\"Volume\")\n            )\n\n            # Update layout\n            fig.update_layout(\n                title=\"Price History and Volume\",\n                xaxis=dict(title=\"Date\"),\n                hovermode=\"x unified\",\n                paper_bgcolor='rgba(255,255,255,0.8)',\n                plot_bgcolor='rgba(255,255,255,0.8)',\n            )\n\n            return fig\n        \n    \n    with ui.card():\n        ui.card_header(\"Latest data\")\n\n        @render.data_frame\n        def latest_data():\n            x = get_data()[:1].T.reset_index()\n            x.columns = [\"Category\", \"Value\"]\n            x[\"Value\"] = x[\"Value\"].apply(lambda v: f\"{v:.1f}\")\n            return x\n        \n# Reactive calculations\n\n@reactive.calc\ndef get_ticker():\n    return yf.Ticker(selected_stock)\n\n@reactive.calc\ndef get_data():\n    dates = input.dates()\n    return get_ticker().history(start=dates[0], end=dates[1])\n\n\n@reactive.calc\ndef get_change():\n    close = get_data()[\"Close\"]\n    return close.iloc[-1] - close.iloc[-2]\n\n@reactive.calc\ndef get_change_percent():\n    close = get_data()[\"Close\"]\n    change = close.iloc[-1] - close.iloc[-2]\n    return change / close.iloc[-2] * 100\n\nwith ui.hold():\n\n    @render.ui\n    def change_icon():\n        change = get_change()\n        icon = icon_svg(\"arrow-up\" if change >= 0 else \"arrow-down\")\n        icon.add_class(f\"text-{('success' if change >= 0 else 'danger')}\")\n        return icon", "type": "text"}, {"name": "stocks.py", "content": "stocks = {\n    \"AAPL\": \"Apple Inc.\",\n}", "type": "text"}, {"name": "styles.css", "content": ":root {\n    --bslib-sidebar-main-bg: #f8f8f8;\n  }\n  \n  .plotly .modebar-container {\n    display: none !important;\n  }", "type": "text"}]